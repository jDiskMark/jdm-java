
package jdiskmark;

import static jdiskmark.App.dataDir;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Desktop;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.text.DefaultCaret;

/**
 * The parent frame of the app
 */
public final class MainFrame extends javax.swing.JFrame {

    public static final DecimalFormat DF = new DecimalFormat("###.##");
    
    /**
     * Creates new form MainFrame
     */
    
    @SuppressWarnings("unchecked")
    public MainFrame() {
        initComponents();
        
        //for diagnostics
        //controlsPanel.setBackground(Color.blue);
        
        DefaultComboBoxModel<Benchmark.IOMode> ioModel
                = new DefaultComboBoxModel<>(Benchmark.IOMode.values());
        modeCombo.setModel(ioModel);

        startButton.requestFocus();
        Gui.createChartPanel();
        mountPanel.setLayout(new BorderLayout());
        Gui.chartPanel.setSize(mountPanel.getSize());
        Gui.chartPanel.setSize(mountPanel.getWidth(), 200);
        mountPanel.add(Gui.chartPanel);
        totalTxProgBar.setStringPainted(true);
        totalTxProgBar.setValue(0);
        totalTxProgBar.setString("");
        
        StringBuilder titleSb = new StringBuilder();
        titleSb.append(getTitle()).append(" ").append(App.VERSION);    

        initializeComboSettings();
        
        // architecture
        if (App.arch != null && !App.arch.isEmpty()) {
            titleSb.append(" - ").append(App.arch);
        }
        
        // processor name
        if (App.processorName != null && !App.processorName.isEmpty()) {
            titleSb.append(" - ").append(App.processorName);
        }
        
        // permission indicator
        if (App.isAdmin) titleSb.append(" [Admin]");
        if (App.isRoot) titleSb.append(" [root]");
        
        setTitle(titleSb.toString());
        
        // auto scroll the text area.
        DefaultCaret caret = (DefaultCaret) msgTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        
        // init order combo box
        orderComboBox.addItem(Benchmark.BlockSequence.SEQUENTIAL);
        orderComboBox.addItem(Benchmark.BlockSequence.RANDOM);
    }

    public JPanel getMountPanel() {
        return mountPanel;
    }
    
    /**
     * This method is called when the gui needs to be updated after a new config
     * has been loaded.
     */
    public void loadConfig() {
        if (App.locationDir != null) { // set the location dir if not null
            setLocation(App.locationDir.getAbsolutePath());
        }
        multiFileCheckBoxMenuItem.setSelected(App.multiFile);
        autoRemoveCheckBoxMenuItem.setSelected(App.autoRemoveData);
        autoResetCheckBoxMenuItem.setSelected(App.autoReset);
        showMaxMinCheckBoxMenuItem.setSelected(App.showMaxMin);
        showAccessCheckBoxMenuItem.setSelected(App.showDriveAccess);
        writeSyncCheckBoxMenuItem.setSelected(App.writeSyncEnable);

        switch (Gui.palette) {
            case Gui.Palette.CLASSIC -> {
                classicPaletteMenuItem.setSelected(true);
                Gui.setClassicColorScheme();
            }
            case Gui.Palette.BLUE_GREEN -> {
                blueGreenPaletteMenuItem.setSelected(true);
                Gui.setBlueGreenScheme();
            }
            case Gui.Palette.BARD_COOL -> {
                bardCoolPaletteMenuItem.setSelected(true);
                Gui.setCoolColorScheme();
            }
            case Gui.Palette.BARD_WARM -> {
                bardWarmPaletteMenuItem.setSelected(true);
                Gui.setWarmColorScheme();
            }
        }
    }

    public void initializeComboSettings() {
    modeCombo.setSelectedItem(App.ioMode);
    loadSettings();
}

    public void loadSettings() {
        //String blockOrderStr = App.randomEnable ? "random":"sequential";
        orderComboBox.setSelectedItem(App.blockSequence);
        
        numFilesCombo.setSelectedItem(String.valueOf(App.numOfSamples));
        numBlocksCombo.setSelectedItem(String.valueOf(App.numOfBlocks));
        blockSizeCombo.setSelectedItem(String.valueOf(App.blockSizeKb)); 
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        palettebuttonGroup = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        runPanel = new jdiskmark.BenchmarkPanel();
        eventScrollPane = new javax.swing.JScrollPane();
        msgTextArea = new javax.swing.JTextArea();
        locationPanel = new javax.swing.JPanel();
        chooseButton = new javax.swing.JButton();
        locationText = new javax.swing.JTextField();
        openLocButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        mountPanel = new javax.swing.JPanel();
        controlsPanel = new javax.swing.JPanel();
        numBlocksCombo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        blockSizeCombo = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        numFilesCombo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        modeCombo = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        sampleSizeLabel = new javax.swing.JLabel();
        orderComboBox = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        numThreadsCombo = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        wAvgLabel = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        rMinLabel = new javax.swing.JLabel();
        wIopsLabel = new javax.swing.JLabel();
        rMaxLabel = new javax.swing.JLabel();
        rIopsLabel = new javax.swing.JLabel();
        rAvgLabel = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        rAccessLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        wAccessLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        wMinLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        wMaxLabel = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        progressPanel = new javax.swing.JPanel();
        totalTxProgBar = new javax.swing.JProgressBar();
        jLabel7 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        actionMenu = new javax.swing.JMenu();
        clearLogsItem = new javax.swing.JMenuItem();
        deleteDataMenuItem = new javax.swing.JMenuItem();
        deleteSelBenchmarksItem = new javax.swing.JMenuItem();
        deleteAllBenchmarksItem = new javax.swing.JMenuItem();
        resetSequenceMenuItem = new javax.swing.JMenuItem();
        resetBenchmarkItem = new javax.swing.JMenuItem();
        optionMenu = new javax.swing.JMenu();
        writeSyncCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        multiFileCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        autoRemoveCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        autoResetCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        showMaxMinCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        showAccessCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        colorPaletteMenu = new javax.swing.JMenu();
        classicPaletteMenuItem = new javax.swing.JRadioButtonMenuItem();
        blueGreenPaletteMenuItem = new javax.swing.JRadioButtonMenuItem();
        bardCoolPaletteMenuItem = new javax.swing.JRadioButtonMenuItem();
        bardWarmPaletteMenuItem = new javax.swing.JRadioButtonMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JDiskMark");

        tabbedPane.addTab("Benchmarks", runPanel);

        msgTextArea.setEditable(false);
        msgTextArea.setColumns(20);
        msgTextArea.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        msgTextArea.setRows(5);
        msgTextArea.setTabSize(4);
        eventScrollPane.setViewportView(msgTextArea);

        tabbedPane.addTab("Events", eventScrollPane);

        chooseButton.setText("Browse");
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        locationText.setEditable(false);

        openLocButton.setText("Open");
        openLocButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openLocButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("/JDiskMarkData");

        jLabel22.setText("Specify the location where the data files will be generated and read from to assess each sample's bandwidth.");

        javax.swing.GroupLayout locationPanelLayout = new javax.swing.GroupLayout(locationPanel);
        locationPanel.setLayout(locationPanelLayout);
        locationPanelLayout.setHorizontalGroup(
            locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(locationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(locationPanelLayout.createSequentialGroup()
                        .addComponent(locationText, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(chooseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openLocButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        locationPanelLayout.setVerticalGroup(
            locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseButton)
                    .addComponent(openLocButton)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addComponent(jLabel22)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Drive Location", locationPanel);

        mountPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mountPanel.setMaximumSize(new java.awt.Dimension(503, 200));

        javax.swing.GroupLayout mountPanelLayout = new javax.swing.GroupLayout(mountPanel);
        mountPanel.setLayout(mountPanelLayout);
        mountPanelLayout.setHorizontalGroup(
            mountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mountPanelLayout.setVerticalGroup(
            mountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        controlsPanel.setPreferredSize(new java.awt.Dimension(250, 420));

        numBlocksCombo.setEditable(true);
        numBlocksCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "8", "16", "32", "64", "128", "256", "512", "1024", "2048", "4096", "8192" }));
        numBlocksCombo.setSelectedIndex(6);
        numBlocksCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numBlocksComboActionPerformed(evt);
            }
        });

        jLabel5.setText("Blocks / Sample");

        jLabel6.setText("Block Size (KB)");

        blockSizeCombo.setEditable(true);
        blockSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "4", "8", "16", "32", "64", "128", "256", "512", "1024", "2048" }));
        blockSizeCombo.setSelectedIndex(8);
        blockSizeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockSizeComboActionPerformed(evt);
            }
        });

        jLabel8.setText("No. Samples");

        numFilesCombo.setEditable(true);
        numFilesCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "50", "100", "200", "300", "500", "1000", "2000", "3000", "5000", "10000" }));
        numFilesCombo.setSelectedIndex(2);
        numFilesCombo.setPreferredSize(new java.awt.Dimension(72, 24));
        numFilesCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numFilesComboActionPerformed(evt);
            }
        });

        jLabel4.setText("IO Mode");

        modeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", " " }));
        modeCombo.setPreferredSize(new java.awt.Dimension(60, 24));
        modeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeComboActionPerformed(evt);
            }
        });

        jLabel9.setText("Sample Size (KB)");

        sampleSizeLabel.setText("- -");
        sampleSizeLabel.setPreferredSize(new java.awt.Dimension(70, 18));

        orderComboBox.setMaximumSize(new java.awt.Dimension(106, 32767));
        orderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderComboBoxActionPerformed(evt);
            }
        });

        jLabel14.setText("Block Order");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        numThreadsCombo.setEditable(true);
        numThreadsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "4", "8", "16" }));
        numThreadsCombo.setSelectedIndex(2);
        numThreadsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numThreadsComboActionPerformed(evt);
            }
        });

        jLabel21.setText("Number Threads");

        wAvgLabel.setText("- -");

        jLabel19.setText("IOPS");

        rMinLabel.setText("- -");

        wIopsLabel.setText("- -");

        rMaxLabel.setText("- -");

        rIopsLabel.setText("- -");

        rAvgLabel.setText("- -");

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Read IO (MB/s)");

        jLabel10.setText("Min");

        jLabel17.setText("Acc (ms)");

        jLabel1.setText("Min");

        rAccessLabel.setText("- -");

        jLabel2.setText("Max");

        jLabel16.setText("Acc (ms)");

        jLabel3.setText("Avg");

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Write IO (MB/s)");

        wAccessLabel.setText("- -");

        jLabel11.setText("Max");

        wMinLabel.setText("- -");

        jLabel12.setText("Avg");

        wMaxLabel.setText("- -");

        jLabel18.setText("IOPS");

        javax.swing.GroupLayout controlsPanelLayout = new javax.swing.GroupLayout(controlsPanel);
        controlsPanel.setLayout(controlsPanelLayout);
        controlsPanelLayout.setHorizontalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(controlsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(sampleSizeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(controlsPanelLayout.createSequentialGroup()
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(controlsPanelLayout.createSequentialGroup()
                                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel21))
                                .addGap(18, 18, 18)
                                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(modeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(numThreadsCombo, 0, 100, Short.MAX_VALUE)
                                    .addComponent(orderComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(numBlocksCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(blockSizeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(numFilesCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(controlsPanelLayout.createSequentialGroup()
                                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addGroup(controlsPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(wIopsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(controlsPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel16)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(wAccessLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, controlsPanelLayout.createSequentialGroup()
                                            .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel1)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel3))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(wAvgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(wMaxLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(wMinLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(controlsPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel19)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(rIopsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, controlsPanelLayout.createSequentialGroup()
                                            .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel10)
                                                .addComponent(jLabel12)
                                                .addComponent(jLabel11))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(rMinLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(rMaxLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(rAvgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, controlsPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel17)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(rAccessLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(2, 2, 2)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        controlsPanelLayout.setVerticalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(modeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numThreadsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(numBlocksCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(blockSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(numFilesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(sampleSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(controlsPanelLayout.createSequentialGroup()
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(rMinLabel))
                        .addGap(30, 30, 30)
                        .addComponent(rAvgLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(rAccessLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(rIopsLabel)))
                    .addGroup(controlsPanelLayout.createSequentialGroup()
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(wMinLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(wMaxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11)
                                .addComponent(rMaxLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(wAvgLabel)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(wAccessLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(wIopsLabel))))
                .addContainerGap())
        );

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Total Tx (KB)");

        javax.swing.GroupLayout progressPanelLayout = new javax.swing.GroupLayout(progressPanel);
        progressPanel.setLayout(progressPanelLayout);
        progressPanelLayout.setHorizontalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalTxProgBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        progressPanelLayout.setVerticalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalTxProgBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        fileMenu.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        menuBar.add(fileMenu);

        actionMenu.setText("Action");

        clearLogsItem.setText("Clear Event Logs");
        clearLogsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLogsItemActionPerformed(evt);
            }
        });
        actionMenu.add(clearLogsItem);

        deleteDataMenuItem.setText("Delete Data Directory");
        deleteDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDataMenuItemActionPerformed(evt);
            }
        });
        actionMenu.add(deleteDataMenuItem);

        deleteSelBenchmarksItem.setText("Delete Selected Benchmark");
        deleteSelBenchmarksItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelBenchmarksItemActionPerformed(evt);
            }
        });
        actionMenu.add(deleteSelBenchmarksItem);

        deleteAllBenchmarksItem.setText("Delete All Benchmarks");
        deleteAllBenchmarksItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllBenchmarksItemActionPerformed(evt);
            }
        });
        actionMenu.add(deleteAllBenchmarksItem);

        resetSequenceMenuItem.setText("Reset Sequence");
        resetSequenceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSequenceMenuItemActionPerformed(evt);
            }
        });
        actionMenu.add(resetSequenceMenuItem);

        resetBenchmarkItem.setText("Reset Benchmark");
        resetBenchmarkItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBenchmarkItemActionPerformed(evt);
            }
        });
        actionMenu.add(resetBenchmarkItem);

        menuBar.add(actionMenu);

        optionMenu.setText("Options");

        writeSyncCheckBoxMenuItem.setSelected(true);
        writeSyncCheckBoxMenuItem.setText("Write Sync");
        writeSyncCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeSyncCheckBoxMenuItemActionPerformed(evt);
            }
        });
        optionMenu.add(writeSyncCheckBoxMenuItem);

        multiFileCheckBoxMenuItem.setSelected(true);
        multiFileCheckBoxMenuItem.setText("Multi Data File");
        multiFileCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiFileCheckBoxMenuItemActionPerformed(evt);
            }
        });
        optionMenu.add(multiFileCheckBoxMenuItem);

        autoRemoveCheckBoxMenuItem.setSelected(true);
        autoRemoveCheckBoxMenuItem.setText("Auto Remove Data Dir");
        autoRemoveCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoRemoveCheckBoxMenuItemActionPerformed(evt);
            }
        });
        optionMenu.add(autoRemoveCheckBoxMenuItem);

        autoResetCheckBoxMenuItem.setSelected(true);
        autoResetCheckBoxMenuItem.setText("Auto Reset");
        autoResetCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoResetCheckBoxMenuItemActionPerformed(evt);
            }
        });
        optionMenu.add(autoResetCheckBoxMenuItem);
        optionMenu.add(jSeparator2);

        showMaxMinCheckBoxMenuItem.setSelected(true);
        showMaxMinCheckBoxMenuItem.setText("Show Max Min");
        showMaxMinCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showMaxMinCheckBoxMenuItemActionPerformed(evt);
            }
        });
        optionMenu.add(showMaxMinCheckBoxMenuItem);

        showAccessCheckBoxMenuItem.setSelected(true);
        showAccessCheckBoxMenuItem.setText("Show Access Time");
        showAccessCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAccessCheckBoxMenuItemActionPerformed(evt);
            }
        });
        optionMenu.add(showAccessCheckBoxMenuItem);
        optionMenu.add(jSeparator1);

        colorPaletteMenu.setText("Color Palette");
        palettebuttonGroup.add(colorPaletteMenu);

        palettebuttonGroup.add(classicPaletteMenuItem);
        classicPaletteMenuItem.setText("Classic");
        classicPaletteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classicPaletteMenuItemActionPerformed(evt);
            }
        });
        colorPaletteMenu.add(classicPaletteMenuItem);

        palettebuttonGroup.add(blueGreenPaletteMenuItem);
        blueGreenPaletteMenuItem.setText("Blue Green");
        blueGreenPaletteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueGreenPaletteMenuItemActionPerformed(evt);
            }
        });
        colorPaletteMenu.add(blueGreenPaletteMenuItem);

        palettebuttonGroup.add(bardCoolPaletteMenuItem);
        bardCoolPaletteMenuItem.setText("Bard Cool");
        bardCoolPaletteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bardCoolPaletteMenuItemActionPerformed(evt);
            }
        });
        colorPaletteMenu.add(bardCoolPaletteMenuItem);

        palettebuttonGroup.add(bardWarmPaletteMenuItem);
        bardWarmPaletteMenuItem.setText("Bard Warm");
        bardWarmPaletteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bardWarmPaletteMenuItemActionPerformed(evt);
            }
        });
        colorPaletteMenu.add(bardWarmPaletteMenuItem);

        optionMenu.add(colorPaletteMenu);

        menuBar.add(optionMenu);

        helpMenu.setText("Help");

        jMenuItem2.setText("About...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem2);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane)
                .addContainerGap())
            .addComponent(progressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(controlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mountPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(controlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mountPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed
        Gui.browseLocation();
    }//GEN-LAST:event_chooseButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (App.state == App.State.DISK_TEST_STATE) {
            App.cancelBenchmark();
        } else if (App.state == App.State.IDLE_STATE) {
            applyTestParams();
            App.saveConfig();
            App.startBenchmark();
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void blockSizeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockSizeComboActionPerformed
        if (blockSizeCombo.hasFocus()) {
            App.blockSizeKb = Integer.parseInt((String) blockSizeCombo.getSelectedItem());
            sampleSizeLabel.setText(String.valueOf(App.targetMarkSizeKb()));
            totalTxProgBar.setString(String.valueOf(App.targetTxSizeKb()));
            App.saveConfig();
        }
    }//GEN-LAST:event_blockSizeComboActionPerformed

    private void numBlocksComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numBlocksComboActionPerformed
        if (numBlocksCombo.hasFocus()) {
            App.numOfBlocks = Integer.parseInt((String) numBlocksCombo.getSelectedItem());
            sampleSizeLabel.setText(String.valueOf(App.targetMarkSizeKb()));
            totalTxProgBar.setString(String.valueOf(App.targetTxSizeKb()));
            App.saveConfig();
        }
    }//GEN-LAST:event_numBlocksComboActionPerformed

    private void numFilesComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numFilesComboActionPerformed
        if (numFilesCombo.hasFocus()) {
            App.numOfSamples = Integer.parseInt((String) numFilesCombo.getSelectedItem());
            sampleSizeLabel.setText(String.valueOf(App.targetMarkSizeKb()));
            totalTxProgBar.setString(String.valueOf(App.targetTxSizeKb()));
            App.saveConfig();
        }
    }//GEN-LAST:event_numFilesComboActionPerformed

    private void modeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeComboActionPerformed
        if (modeCombo.hasFocus()) {
            Benchmark.IOMode mode = (Benchmark.IOMode) modeCombo.getSelectedItem();
            App.ioMode = mode;
            App.saveConfig();
            System.out.println("modeCombo changed to: " + mode);
        }
    }//GEN-LAST:event_modeComboActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(Gui.mainFrame, 
                "JDiskMark " + App.VERSION, "About...", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void openLocButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openLocButtonActionPerformed
        try {
            Desktop.getDesktop().open(App.locationDir);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openLocButtonActionPerformed

    private void clearLogsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLogsItemActionPerformed
        clearMessages();
    }//GEN-LAST:event_clearLogsItemActionPerformed

    private void multiFileCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiFileCheckBoxMenuItemActionPerformed
        App.multiFile = multiFileCheckBoxMenuItem.getState();
        App.saveConfig();
    }//GEN-LAST:event_multiFileCheckBoxMenuItemActionPerformed

    private void autoRemoveCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoRemoveCheckBoxMenuItemActionPerformed
        App.autoRemoveData = autoRemoveCheckBoxMenuItem.getState();
        App.saveConfig();
    }//GEN-LAST:event_autoRemoveCheckBoxMenuItemActionPerformed

    private void deleteDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDataMenuItemActionPerformed
        Util.deleteDirectory(dataDir);
    }//GEN-LAST:event_deleteDataMenuItemActionPerformed

    private void autoResetCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoResetCheckBoxMenuItemActionPerformed
        App.autoReset = autoResetCheckBoxMenuItem.getState();
        App.saveConfig();
    }//GEN-LAST:event_autoResetCheckBoxMenuItemActionPerformed

    private void resetSequenceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSequenceMenuItemActionPerformed
        App.resetSequence();
    }//GEN-LAST:event_resetSequenceMenuItemActionPerformed

    private void showMaxMinCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showMaxMinCheckBoxMenuItemActionPerformed
        App.showMaxMin = showMaxMinCheckBoxMenuItem.getState();
        App.saveConfig();
    }//GEN-LAST:event_showMaxMinCheckBoxMenuItemActionPerformed

    private void orderComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderComboBoxActionPerformed
        if (orderComboBox.hasFocus()) {
            App.blockSequence = (Benchmark.BlockSequence) orderComboBox.getSelectedItem();
            App.saveConfig();
        }
    }//GEN-LAST:event_orderComboBoxActionPerformed

    private void writeSyncCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeSyncCheckBoxMenuItemActionPerformed
        App.writeSyncEnable = writeSyncCheckBoxMenuItem.getState();
        App.saveConfig();
    }//GEN-LAST:event_writeSyncCheckBoxMenuItemActionPerformed

    private void deleteAllBenchmarksItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllBenchmarksItemActionPerformed
        int result = JOptionPane.showConfirmDialog(this, 
            "Delete all benchmarks?", 
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION) {
            App.msg("Deleting all benchmarks.");
            App.deleteAllBenchmarks();
        }
    }//GEN-LAST:event_deleteAllBenchmarksItemActionPerformed

    private void showAccessCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAccessCheckBoxMenuItemActionPerformed
        App.showDriveAccess = showAccessCheckBoxMenuItem.getState();
        App.saveConfig();
    }//GEN-LAST:event_showAccessCheckBoxMenuItemActionPerformed

    private void blueGreenPaletteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueGreenPaletteMenuItemActionPerformed
        Gui.setBlueGreenScheme();
        App.saveConfig();
    }//GEN-LAST:event_blueGreenPaletteMenuItemActionPerformed

    private void classicPaletteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classicPaletteMenuItemActionPerformed
        Gui.setClassicColorScheme();
        App.saveConfig();
    }//GEN-LAST:event_classicPaletteMenuItemActionPerformed

    private void bardCoolPaletteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bardCoolPaletteMenuItemActionPerformed
        Gui.setCoolColorScheme();
        App.saveConfig();
    }//GEN-LAST:event_bardCoolPaletteMenuItemActionPerformed

    private void bardWarmPaletteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bardWarmPaletteMenuItemActionPerformed
        Gui.setWarmColorScheme();
        App.saveConfig();
    }//GEN-LAST:event_bardWarmPaletteMenuItemActionPerformed

    private void deleteSelBenchmarksItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelBenchmarksItemActionPerformed
        int result = JOptionPane.showConfirmDialog(this, 
            "Delete selected benchmarks?", 
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION) {
            App.msg("Deleting selected benchmarks.");
            List<Long> benchmarkIds = Gui.runPanel.getSelectedIds();
            App.deleteBenchmarks(benchmarkIds);
        }
    }//GEN-LAST:event_deleteSelBenchmarksItemActionPerformed

    private void resetBenchmarkItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBenchmarkItemActionPerformed
        App.resetTestData();
        Gui.resetBenchmarkData();
        Gui.updateLegendAndAxis();
    }//GEN-LAST:event_resetBenchmarkItemActionPerformed

    private void numThreadsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numThreadsComboActionPerformed
        if (numThreadsCombo.hasFocus()) {
            App.numOfThreads = Integer.parseInt((String) numThreadsCombo.getSelectedItem());
            App.saveConfig();
        }
    }//GEN-LAST:event_numThreadsComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu actionMenu;
    private javax.swing.JCheckBoxMenuItem autoRemoveCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem autoResetCheckBoxMenuItem;
    private javax.swing.JRadioButtonMenuItem bardCoolPaletteMenuItem;
    private javax.swing.JRadioButtonMenuItem bardWarmPaletteMenuItem;
    private javax.swing.JComboBox blockSizeCombo;
    private javax.swing.JRadioButtonMenuItem blueGreenPaletteMenuItem;
    private javax.swing.JButton chooseButton;
    private javax.swing.JRadioButtonMenuItem classicPaletteMenuItem;
    private javax.swing.JMenuItem clearLogsItem;
    private javax.swing.JMenu colorPaletteMenu;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JMenuItem deleteAllBenchmarksItem;
    private javax.swing.JMenuItem deleteDataMenuItem;
    private javax.swing.JMenuItem deleteSelBenchmarksItem;
    private javax.swing.JScrollPane eventScrollPane;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPanel locationPanel;
    private javax.swing.JTextField locationText;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JComboBox modeCombo;
    private javax.swing.JPanel mountPanel;
    private javax.swing.JTextArea msgTextArea;
    private javax.swing.JCheckBoxMenuItem multiFileCheckBoxMenuItem;
    private javax.swing.JComboBox numBlocksCombo;
    private javax.swing.JComboBox numFilesCombo;
    private javax.swing.JComboBox numThreadsCombo;
    private javax.swing.JButton openLocButton;
    private javax.swing.JMenu optionMenu;
    private javax.swing.JComboBox<Benchmark.BlockSequence> orderComboBox;
    private javax.swing.ButtonGroup palettebuttonGroup;
    private javax.swing.JPanel progressPanel;
    private javax.swing.JLabel rAccessLabel;
    private javax.swing.JLabel rAvgLabel;
    private javax.swing.JLabel rIopsLabel;
    private javax.swing.JLabel rMaxLabel;
    private javax.swing.JLabel rMinLabel;
    private javax.swing.JMenuItem resetBenchmarkItem;
    private javax.swing.JMenuItem resetSequenceMenuItem;
    private jdiskmark.BenchmarkPanel runPanel;
    private javax.swing.JLabel sampleSizeLabel;
    private javax.swing.JCheckBoxMenuItem showAccessCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem showMaxMinCheckBoxMenuItem;
    private javax.swing.JButton startButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JProgressBar totalTxProgBar;
    private javax.swing.JLabel wAccessLabel;
    private javax.swing.JLabel wAvgLabel;
    private javax.swing.JLabel wIopsLabel;
    private javax.swing.JLabel wMaxLabel;
    private javax.swing.JLabel wMinLabel;
    private javax.swing.JCheckBoxMenuItem writeSyncCheckBoxMenuItem;
    // End of variables declaration//GEN-END:variables

    public void setLocation(String path ) {
        locationText.setText(path);
    }
    
    public void msg(String message) {
        msgTextArea.append(message+'\n');
    }
  
    public void applyTestParams() {
        Benchmark.IOMode mode = (Benchmark.IOMode) modeCombo.getSelectedItem();
        App.ioMode = mode;
        App.blockSequence = (Benchmark.BlockSequence) orderComboBox.getSelectedItem();
        App.numOfSamples = Integer.parseInt((String) numFilesCombo.getSelectedItem());
        App.numOfBlocks = Integer.parseInt((String) numBlocksCombo.getSelectedItem());
        App.blockSizeKb = Integer.parseInt((String) blockSizeCombo.getSelectedItem());
        App.numOfThreads = Integer.parseInt((String) numThreadsCombo.getSelectedItem());
        sampleSizeLabel.setText(String.valueOf(App.targetMarkSizeKb()));
        totalTxProgBar.setString(String.valueOf(App.targetTxSizeKb()));
    }
    
    public void refreshWriteMetrics() {
        String value;
        value = App.wMin == -1 ? "- -" : DF.format(App.wMin);
        wMinLabel.setText(value);
        value = App.wMax == -1 ? "- -" : DF.format(App.wMax);
        wMaxLabel.setText(value);
        value = App.wAvg == -1 ? "- -" : DF.format(App.wAvg);
        wAvgLabel.setText(value);
        value = App.wAcc == -1 ? "- -" : DF.format(App.wAcc);
        wAccessLabel.setText(value);
        value = App.wIops == -1 ? "- -" : String.valueOf(App.wIops);
        wIopsLabel.setText(value);
    }
    
    public void refreshReadMetrics() {
        String value;
        value = App.rMin == -1 ? "- -" : DF.format(App.rMin);
        rMinLabel.setText(value);
        value = App.rMax == -1 ? "- -" : DF.format(App.rMax);
        rMaxLabel.setText(value);
        value = App.rAvg == -1 ? "- -" : DF.format(App.rAvg);
        rAvgLabel.setText(value);
        value = App.rAcc == -1 ? "- -" : DF.format(App.rAcc);
        rAccessLabel.setText(value);
        value = App.rIops == -1 ? "- -" : String.valueOf(App.rIops);
        rIopsLabel.setText(value);
    }
    
    public javax.swing.JProgressBar getProgressBar() {
        return totalTxProgBar;
    }
    
    public void clearMessages() {
        msgTextArea.setText("");
    }
    
    public void adjustSensitivity() {
        switch (App.state) {
            case App.State.DISK_TEST_STATE -> {
                startButton.setText("Cancel");
                orderComboBox.setEnabled(false);
                blockSizeCombo.setEnabled(false);
                numBlocksCombo.setEnabled(false);
                numFilesCombo.setEnabled(false);
                modeCombo.setEnabled(false);
                numThreadsCombo.setEnabled(false);
                resetBenchmarkItem.setEnabled(false);
            }
            case App.State.IDLE_STATE -> {
                startButton.setText("Start");
                orderComboBox.setEnabled(true);
                blockSizeCombo.setEnabled(true);
                numBlocksCombo.setEnabled(true);
                numFilesCombo.setEnabled(true);
                modeCombo.setEnabled(true);
                numThreadsCombo.setEnabled(true);
                resetBenchmarkItem.setEnabled(true);
            }
        }
    }   
    // Replace lowercase mode options with proper casing

@SuppressWarnings("unchecked")
private void configureModeCombo() {
    modeCombo.removeAllItems();
    modeCombo.addItem("Write");
    modeCombo.addItem("Read");
    modeCombo.addItem("Read & Write");
}    
}
