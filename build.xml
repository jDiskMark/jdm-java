<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="jDiskMark" default="default" basedir=".">
    <description>Builds, tests, and runs the project jDiskMark.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="jDiskMark-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    
    <!-- build environment -->
    <property name="dist.dir" value="dist"/>
    <property name="build.dir" value="build"/>   

    <!-- dependencies -->
    <property name="jpackage.executable" value="C:\Program Files\java\jdk-21\bin\jpackage"/>
    <property name="signtool.executable" value="C:\Program Files (x86)\Windows Kits\10\bin\10.0.26100.0\x86\signtool.exe"/>

    <!-- version properties -->
    <property name="pkg.name" value="jdiskmark"/>
    <property name="version" value="0.6.2-cp.laf"/>
    <property name="msi.version" value="0.6.2"/>
    <property name="release.dir" value="${pkg.name}-${version}"/>

    <!-- msi signing properties -->
    <property name="timestamp.server.url" value="http://timestamp.sectigo.com"/>
    <property name="sign.digest.td" value="sha256"/>
    <property name="sign.digest.fd" value="sha256"/>
    <property name="msi.file.to.sign.path" value="${dist.dir}/${pkg.name}-${version}.msi"/>
    
    <target name="-post-jar">
        <copy file="EmptyStandbyList.exe" todir="dist"/>
        <copy file="capacity.ps1" todir="dist"/>
        <copy file="disk-model.ps1" todir="dist"/>
        <antcall target="buildinfo"/>
        <copy file="build.properties" todir="dist"/>
        <copy file="README.md" todir="dist"/>
        <mkdir dir="tmp"/>
        <mkdir dir="tmp/${release.dir}"/>
        <delete file="dist/README.TXT"/>
        <move todir="tmp/${release.dir}">
            <fileset dir="dist">
                <include name="**/*"/>
            </fileset>
        </move>
        <zip destfile="dist/${release.dir}.zip" basedir="tmp"/>
        <move todir="dist/${release.dir}">
            <fileset dir="tmp/${release.dir}"/>
        </move>
        <delete dir="tmp"/>
    </target>
    
    <target name="buildinfo">
        <tstamp>
            <format property="builtat" pattern="MM/dd/yyyy hh:mm aa" timezone="America/Los_Angeles"/>
        </tstamp>        
        <exec executable="whoami" outputproperty="whoami"/>
        <propertyfile file="build.properties"
            comment="This file is automatically generated - DO NOT EDIT">
            <entry key="buildtime" value="${builtat}"/>
            <entry key="builder" value="${whoami}"/>
            <entry key="version" value="${version}"/>
            <entry key="os.name" value="${os.name}"/>
            <entry key="os.version" value="${os.version}"/>
            <entry key="os.arch" value="${os.arch}"/>
            <entry key="sun.cpu.endian" value="${sun.cpu.endian}"/>
            <entry key="sun.arch.data.model" value="${sun.arch.data.model}"/>
        </propertyfile>
    </target>
    
    <target name="-prepare-jpackage-input-jar" description="Ensures correct main JAR name for jpackage">
        <property name="jpackage.input.dir.absolute" value="${dist.dir}/${release.dir}"/>
        <property name="main.jar.original.filename.in.input.dir" value="${ant.project.name}.jar"/>
        <property name="main.jar.target.filename.in.input.dir" value="${pkg.name}.jar"/>

        <condition property="jar.rename.is.needed">
            <and>
                <available file="${jpackage.input.dir.absolute}/${main.jar.original.filename.in.input.dir}"/>
                <not>
                    <equals arg1="${main.jar.original.filename.in.input.dir}" 
                            arg2="${main.jar.target.filename.in.input.dir}" 
                            casesensitive="true"/>
                </not>
            </and>
        </condition>

        <antcall target="-do-rename-jar-for-jpackage-if-needed"/>
    </target>

    <target name="-do-rename-jar-for-jpackage-if-needed" if="jar.rename.is.needed">
        <echo message="Renaming JAR in jpackage input directory: from '${main.jar.original.filename.in.input.dir}' to '${main.jar.target.filename.in.input.dir}'"/>
        <move file="${jpackage.input.dir.absolute}/${main.jar.original.filename.in.input.dir}"
              tofile="${jpackage.input.dir.absolute}/${main.jar.target.filename.in.input.dir}"
              overwrite="true"/>
    </target>

    <target name="create-msi" depends="-post-jar, -prepare-jpackage-input-jar" description="Creates the MSI installer using jpackage and WiX">
        <property name="jpackage.input.dir.relative" value="${release.dir}"/>

        <echo message="Deleting existing MSI files: ${dist.dir}/${pkg.name}-*.msi"/>
        <delete failonerror="false">
            <fileset dir="${dist.dir}" includes="${pkg.name}-*.msi"/>
        </delete>

        <echo message="Running jpackage to create MSI installer..."/>
        <exec executable="${jpackage.executable}" dir="${dist.dir}" failonerror="true">
            <arg line="--type msi"/>
            <arg line="--input ${jpackage.input.dir.relative}"/>
            <arg line="--main-jar ${pkg.name}.jar"/>
            <arg line="--name ${pkg.name}-${version}"/>
            <arg line="--app-version ${msi.version}"/>
            <arg line="--vendor 'JDiskMark'"/>
            <arg line="--win-console"/>
            <arg line="--win-menu"/>
            </exec>

        <property name="jpackage.output.msi.defaultname" value="${pkg.name}-${version}-${msi.version}.msi"/>
        <property name="jpackage.output.msi.targetname" value="${pkg.name}-${version}.msi"/>
        
        <echo message="Renaming MSI from '${jpackage.output.msi.defaultname}' to '${jpackage.output.msi.targetname}' in ${dist.dir}"/>
        <move file="${dist.dir}/${jpackage.output.msi.defaultname}"
              tofile="${dist.dir}/${jpackage.output.msi.targetname}"
              overwrite="true"/>

        <echo message="MSI installer created: ${dist.dir}/${jpackage.output.msi.targetname}"/>
    </target>

    <target name="sign-msi" description="Signs the MSI installer using signtool.exe (manual invocation)">
        <echo message="Signing MSI installer..."/>
        <condition property="signtool.is.available">
            <available file="${signtool.executable}" type="file"/>
        </condition>
        <fail unless="signtool.is.available" message="SignTool not found at: ${signtool.executable}. Please check the 'signtool.executable' property."/>

        <condition property="msi.file.for.signing.exists">
            <available file="${msi.file.to.sign.path}" type="file"/>
        </condition>
        <fail unless="msi.file.for.signing.exists" message="MSI file not found at: ${msi.file.to.sign.path}. Please build it first (e.g., using the 'create-msi' target)."/>

        <echo message="Attempting to sign MSI: ${msi.file.to.sign.path}"/>
        <exec executable="${signtool.executable}" failonerror="true">
            <arg value="sign"/>
            <arg value="/tr"/>
            <arg value="${timestamp.server.url}"/>
            <arg value="/td"/>
            <arg value="${sign.digest.td}"/>
            <arg value="/fd"/>
            <arg value="${sign.digest.fd}"/>
            <arg value="/a"/> <arg file="${msi.file.to.sign.path}"/> </exec>
        <echo message="MSI file successfully signed: ${msi.file.to.sign.path}"/>
    </target>

    <target name="package-msi" depends="clean, jar, create-msi, sign-msi" description="Builds JAR and MSI installer"/>

</project>
